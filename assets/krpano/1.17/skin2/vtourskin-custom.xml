<krpano>
	<!-- krpano 1.16.5 - Default Virtual Tour Skin -->

	<!-- Global Skin settings (can be overridden in the 'outer' xml) -->
	<skin_settings bingmaps="false"
	               bingmaps_key=""
	               bingmaps_zoombuttons="false"
	               gyro="true"
	               thumbs_width="120" thumbs_height="80" thumbs_padding="10" thumbs_crop="0|40|240|160"
	               thumbs_opened="false"
	               thumbs_text="false"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_scrollbuttons="false"
	               thumbs_scrollindicator="false"
	               tooltips_thumbs="false"
	               tooltips_hotspots="true"
	               tooltips_mapspots="false"
	               controlbar_offset="20"
	               />


	<!-- Skin Styles -->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="vtourskin.png" />
	
	<layer name="skin_header_usxx" type="container" keep="true" align="lefttop" width="100%" height="100%" x="0" y="0" zorder="102" >	
	<!--About logo-->
		<layer name="skin_info_popup" type="container" bgcolor="0xffffff"  bgalpha="0.0" align="center" width="684" height="428" maskchildren="true" bgcapture="false" visible="false" zorder="19" scalechildren="true">
			<layer name="skin_info_infso" align="righttop" width="684" height="428" x="0" y="0" url="../skin2/img/instructure.png" zorder="9"  onclick="close_infobox('skin_info_popup')"/>
			
			<layer name="skin_info_contact_business" align="leftbottom" width="101" height="8" x="220" y="53" crop="0|8|101|8" onovercrop="0|0|101|8" url="../skin2/img/contact_business.png"  onclick="openurl('http://www.globalvision.ch/en/request-quote.html',_blank);" zorder="12" />
			<layer name="skin_info_contact_press" align="rightbottom" width="81" height="8" x="232" y="53" crop="0|8|81|8" onovercrop="0|0|81|8" url="../skin2/img/contact_press.png"  onclick="openurl('http://www.globalvision.ch/en/contact.html',_blank);" zorder="12" />
			<layer name="skin_info_close" align="righttop" width="15" height="15" x="12" y="10" url="../skin2/img/close-round.png" visible="false"  onclick="close_infobox('skin_info_popup');" zorder="12" onover="set(alpha,0.5)" onout="set(alpha,1)"/>
			
		</layer>
		
	</layer>
	
		
	<action name="open_infobox">
		
		tween(plugin[skin_overall].bgalpha, 0.6, distance(1,0.15));
		set(plugin[skin_overall].bgcapture, true);
		
		set(plugin[%1].visible, true);
		tween(plugin[%1].alpha, 1 ,0.3);
	</action>
	<action name="close_infobox">
		tween(plugin[skin_overall].bgalpha, 0, distance(1,0.15));
		set(plugin[skin_overall].bgcapture, false);
		
		set(plugin[%1].visible, false);
		tween(plugin[%1].alpha, 0.0 ,0.3);
		
		set(onlyone.flag, false);
	</action>

	<!-- skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); "
	       onout="if(skin_lockglow === name, ifnot(pressed, skin_buttonglow(null);delete(skin_lockglow); ));"
	       onup="if(hovering, skin_buttonglow(get(name),0.3), skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"
	       />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:10px;" textshadow="1" />

	<!-- skin_hotspotstyle - style for the hotspots (note - the onclick event will be overwritten! the hotspots need to have a 'linkedscene' attribute to be clickable) -->
	<style name="skin_iconloadpanorama" url="vtourskin_hotspot.png" scale="0.5" edge="top" oy="0"
	 distorted="true" onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );" onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
	       />


   <!-- Spot Style - Load panorama -->
   
    <style name="skin_hotspotstyle_wiki" url="logo-wiki-hotspot.png" visible="true" crop="40|0|40|40" onovercrop="0|0|40|40" onclick="js(openWiki(get(title), get(title_encode), get(starting_line), get(ending_line)));"  height="40" width="40" />
	
	
   <style name="skin_hotspotstyle" url="hotspot_animated_user_defaultpoint51.png" visible="true" frame="0" lastframe="19" framewidth="64" frameheight="64" stopspotsequence="false" distorted="false" onloaded="setdefaultanimatedspotframe();startspotanimation(0.1);" zoom="true" onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1);); skin_updatescroll(); ); js(setTitle(get(linkedscene)));"  height="40" width="40" />

	<!-- tooltips textstyle -->
	<textstyle name="SKIN_TOOLTIPS" font="Arial" fontsize="16" bold="true" italic="false" background="false" border="false" textcolor="0xFFFFFF" effect="dropshadow(1,45,0x000000,4,1);" fadeintime="0.1" fadetime="0.05" />
	
	
	<!-- style for dragging hotspot -->
	<style name="draghotspot"  url="hotspot_animated_user_defaultpoint51.png"
	       distorted="true"
	       ondown="spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery); sub(drag_adjustx, mouse.stagex, hotspotcenterx); sub(drag_adjusty, mouse.stagey, hotspotcentery); asyncloop(pressed, sub(dx, mouse.stagex, drag_adjustx); sub(dy, mouse.stagey, drag_adjusty); screentosphere(dx, dy, ath, atv); );"
	       onclick="oninterrupt(break); lookto(get(ath), get(atv));"
	       />
	
	<!-- the 'tooltip' style - show tooltip textfield and update positions as long as hovering -->
	<style name="tooltip"
	       onover="copy(layer[tooltip].html, scene[get(linkedscene)].title);
	               set(layer[tooltip].visible, true);
	               tween(layer[tooltip].alpha, 1.0, 0.5);
	               asyncloop(hovering, copy(layer[tooltip].x,mouse.stagex); copy(layer[tooltip].y,mouse.stagey); );copy(rotatespeed,autorotate.speed);tween(autorotate.speed,0,0.3);"
	       onout="tween(layer[tooltip].alpha, 0.0, 0.25, default, set(layer[tooltip].visible,false), copy(layer[tooltip].x,mouse.stagex); copy(layer[tooltip].y,mouse.stagey); );stoptween(autorotate.speed);copy(autorotate.speed,rotatespeed);"
	       />


	<!-- the 'tooltip' textfield -->
	<layer name="tooltip" keep="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       parent="STAGE"
	       visible="false" alpha="0"
	       enabled="false"
	       align="lefttop"
	       edge="bottom"
	       oy="-2"
	       width="200"
	       autoheight="true"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0"
	       borderwidth="1.0" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;"
	       html=""
	       />
		
		   
	
	
	<!-- the 'tooltip' style - show tooltip textfield and update positions as long as hovering -->
	<style name="tooltip_wiki"
	       onover="copy(layer[tooltip_wiki].html,title);
	               set(layer[tooltip_wiki].visible, true);
	               tween(layer[tooltip_wiki].alpha, 1.0, 0.5);
	               asyncloop(hovering, copy(layer[tooltip_wiki].x,mouse.stagex); copy(layer[tooltip_wiki].y,mouse.stagey); );copy(rotatespeed,autorotate.speed);tween(autorotate.speed,0,0.3);"
	       onout="tween(layer[tooltip_wiki].alpha, 0.0, 0.25, default, set(layer[tooltip_wiki].visible,false), copy(layer[tooltip_wiki].x,mouse.stagex); copy(layer[tooltip_wiki].y,mouse.stagey); );stoptween(autorotate.speed);copy(autorotate.speed,rotatespeed);"
	       />


	<!-- the 'tooltip' textfield -->
	<layer name="tooltip_wiki" keep="true"
	       url="%SWFPATH%/plugins/textfield.swf"
	       parent="STAGE"
	       visible="false" alpha="0"
	       enabled="false"
	       align="lefttop"
	       edge="bottom"
	       oy="-2"
	       width="200"
	       autoheight="true"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0"
	       borderwidth="1.0" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;"
	       html=""
	       />
		
		   
		   	   

	<!-- Skin Layout -->

	

	<!-- Skin Events -->

	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
	        onnewpano="skin_showloading(true); skin_update_scene_infos();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onresize="skin_onresize(); delayedcall(15.0, close_infobox('skin_info_popup') );"
	        />

	<events name="skin_events" devices="fullscreensupport"
	        onenterfullscreen="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        />


	<!-- Alternative small screen layout for mobile devices (override/extend settings) -->
	<!-- <action name="hide_hotspot_wiki">
		for(set(i, 1), i LT hotspot.count, inc(i),
			txtadd(hotspotname, 'spot', get(i));
			set(hotspot[get(hotspotname)].visible, false);
		);
	</action>
	<action name="show_hotspot_wiki">
		for(set(i, 1), i LT hotspot.count, inc(i),
			txtadd(hotspotname, 'spot', get(i));
			set(hotspot[get(hotspotname)].visible, true);
			trace(get(hotspotname));
		);
	</action> -->

	<!-- Skin Actions -->

	<action name="skin_startup">
		if(device.mobile == false,
			copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
			copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
			add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
			add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);

			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );

			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);

			if(skin_settings.thumbs_onhoverscrolling,
				ifnot(device.touchdevice, set(layer[skin_thumbs].draggable, false));
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			  );
		  );

		if(device.android, if(device.flash, set(skin_settings.bingmaps_zoombuttons, false); ));

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		copy(usegyro, skin_settings.gyro);
		if(device.desktop, set(usegyro, false));
		if(device.flash, set(usegyro, false));
		if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );

		if(skin_settings.bingmaps == true,
			set(layer[skin_btn_map].visible, true);
			copy(layer[skin_map].key, skin_settings.bingmaps_key);
			copy(layer[skin_map_zoom_in].visible,  skin_settings.bingmaps_zoombuttons);
			copy(layer[skin_map_zoom_out].visible, skin_settings.bingmaps_zoombuttons);
			if(device.flash, copy(layer[skin_map].url, layer[skin_map].flash_url), copy(layer[skin_map].url, layer[skin_map].html5_url) );
		  ,
			if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
		  );
	</action>

	<action name="skin_addthumbs">
		
	</action>

	<action name="skin_addmapspots">
		for(set(i,0), i LT scene.count, inc(i),
			if(scene[get(i)].lat,
				txtadd(spotname, 'spot', get(i));
				txtadd(spotclickevent, 'activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,MERGE,BLEND(1)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
				copy(scene[get(i)].mapspotname, spotname);
				if(skin_settings.tooltips_mapspots, escape(spottitle,get(scene[get(i)].title)); txtadd(spothoverevent,'showtext(',get(spottitle),',SKIN_TOOLTIPS)'); , set(spothoverevent,null); );

				addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), get(spothoverevent));
			  );
		  );
		activatespot(spot0);
		zoomToSpotsExtent();
	</action>

	<action name="skin_onresize">
		mul(mh, stageheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		if(layer[skin_map].state == 'opened', sub(hh,stageheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); copy(layer[skin_map].height, hh); add(mh,hh); );
		set(layer[skin_scroll_layer].y, get(mh));
		ifnot(device.mobile, if(stagewidth LT 480, skin_showbuttons(false), skin_showbuttons(true)); );
		if(stagewidth LT 700, set(layer[skin_info_popup].scale, 0.75);, set(layer[skin_info_popup].scale, 1.0));
		if(stagewidth LT 580, set(layer[skin_info_popup].scale, 0.6););
	</action>

	<action name="skin_showbuttons">
		set(layer[skin_btn_lt].visible, %1);
		set(layer[skin_btn_rt].visible, %1);
		set(layer[skin_btn_up].visible, %1);
		set(layer[skin_btn_dn].visible, %1);
		set(layer[skin_btn_in].visible, %1);
		set(layer[skin_btn_ou].visible, %1);
		if(%1 == true,
			if(plugin[skin_gyro].available == true, set(layer[skin_btn_gyro].visible, %1) );
			if(device.fullscreensupport, set(layer[skin_btn_fs].visible, %1) );
		  ,
			set(layer[skin_btn_gyro].visible, %1);
			set(layer[skin_btn_fs].visible, %1);
		  );
	</action>

	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>

	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);
		if(device.mobile, mul(padding,2));

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		  );

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>

	<action name="skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
				if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );
		
				if(scene[get(xml.scene)].index GT 0,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
				  ,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
				  );
		
				sub(lastsceneindex, scene.count, 1);
				if(scene[get(xml.scene)].index LT lastsceneindex,
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  ,
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
				  );
		
				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(scene[get(xml.scene)].index));
				set(layer[skin_thumbborder].visible, true);
		
				if(scene[get(xml.scene)].mapspotname,
					layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
					layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				  );
			  );
		  );
	</action>

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0,
			if(newsceneindex LT scene.count,
				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
				layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
				loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
			  );
		  );
	</action>

	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
	</action>

	<action name="skin_showloading">
		set(layer[skin_loadingtext].visible, %1);
	</action>

	<action name="skin_buttonglow">
		if(%1 != null,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_hideskin">
		if(layer[skin_map].state != 'closed', skin_showmap(false); wait(0.4); );
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_closed), 0.5, easeOutQuint);
		tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_closed), 0.5, easeOutQuint);
		set(layer[skin_btn_show].visible,true);
		tween(layer[skin_btn_show].alpha, 1, 0.25, easeOutQuint);
	</action>

	<action name="skin_showskin">
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_opened), 0.5, easeOutQuint);
		tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_opened), 0.5, easeOutQuint);
		set(layer[skin_btn_show].visible,false);
		tween(layer[skin_btn_show].alpha,0,0);
	</action>

	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			add(mh, layer[skin_thumbs].height);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		  );
	</action>

	<action name="skin_showmap">
		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			tween(layer[skin_logo].alpha, 0.0, 0.25, default, set(layer[skin_logo].visible,false));
			tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
			set(layer[skin_map].visible, true);
			tween(layer[skin_map].alpha, 1.0, 0.25);
			set(layer[skin_map].state, 'opened');
			sub(hh,stageheight,skin_settings.controlbar_offset);
			sub(hh,layer[skin_control_bar].height);
			sub(hh,32);
			add(mh,hh);
			copy(layer[skin_map].height, hh);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
		  ,
			set(layer[skin_map].state, 'closed');
			set(layer[skin_logo].visible, true); tween(layer[skin_logo].alpha, 1.0, 0.25);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
		  );
	</action>

	<action name="skin_openlogo">
		if(layer[skin_logo].state == 'small',
			set(layer[skin_logo].state, 'opening');
			copy(backup_logo_align, layer[skin_logo].align);
			copy(backup_logo_x, layer[skin_logo].x);
			copy(backup_logo_y, layer[skin_logo].y);
			copy(backup_logo_scale, layer[skin_logo].scale);
			layer[skin_logo].changeorigin(center);
			tween(layer[skin_logo].x, 0, 0.5, easeOutQuint);
			tween(layer[skin_logo].y, 0, 0.5, easeOutQuint);
			tween(layer[skin_logo].scale, 1, 0.5, easeOutQuint);
			delayedcall(0.5, set(layer[skin_logo].state, 'opened') );
			delayedcall(0, set(events[skin_events].onmouseup, delayedcall(0, skin_closelogo()) ) );
		  );
	</action>

	<action name="skin_closelogo">
		if(layer[skin_logo].state == 'opened',
			set(layer[skin_logo].state, 'closing');
			layer[skin_logo].changeorigin(get(backup_logo_align));
			if(%1 == 'now',
				stoptween(layer[skin_logo].x, layer[skin_logo].y, layer[skin_logo].scale);
				copy(layer[skin_logo].x, backup_logo_x);
				copy(layer[skin_logo].y, backup_logo_y);
				copy(layer[skin_logo].scale, backup_logo_scale);
				set(layer[skin_logo].state, 'small');
			  ,
				tween(layer[skin_logo].x, get(backup_logo_x), 0.5, easeOutQuint);
				tween(layer[skin_logo].y, get(backup_logo_y), 0.5, easeOutQuint);
				tween(layer[skin_logo].scale, get(backup_logo_scale), 0.5, easeOutQuint);
				delayedcall(0.5, set(layer[skin_logo].state, 'small'));
			  );
			set(events[skin_events].onmouseup, null);
		  );
	</action>

	  <!-- Spot animation management -->
	  <action name="animate">
	    if (tour_stopsequence == false,
	      if (stopspotsequence == false,
	        inc(hotspot[%1].frame,1,get(hotspot[%1].lastframe),0);
	        mul(hotspot[%1].ypos,hotspot[%1].frame,hotspot[%1].frameheight);
	        txtadd(hotspot[%1].crop,'0|',get(hotspot[%1].ypos),'|',get(hotspot[%1].framewidth),'|',get(hotspot[%1].frameheight));
	        delayedcall(%2, animate(%1,%2) );
	      );
	    );
	  </action>
	  <action name="startspotanimation">
	    set(tour_stopsequence, false);
	    set(stopspotsequence , false);
	    animate(get(name)    , %1);
	  </action>
	  <action name="setdefaultanimatedspotframe">
	    txtadd(defaultcrop, "0|0|", get(framewidth), "|", get(frameheight));
	    set(crop, get(defaultcrop));
	  </action>


	<contextmenu>
		<item caption="360° by GlobalVision Communication" onclick="openurl('http://www.globalvision.ch',_blank);" />
		<item name="nv" caption="normal view"        onclick="view_normal();"        separator="true" />
		<item name="fv" caption="fisheye view"       onclick="view_fisheye();"       />
		<item name="av" caption="architectural view" onclick="view_architectural();" />
		<item name="sv" caption="stereographic view" onclick="view_stereographic();" />
		<item name="pv" caption="pannini view"       onclick="view_pannini();"       />
		<item name="lp" caption="little planet view" onclick="view_littleplanet();"  />
	</contextmenu>
	
	<!-- actions for view changing -->
	<action name="view_normal">
		tween(view.fovmax,       100.0, distance(179, 1.00), easeoutquad);
		tween(view.architectural,  0.0, distance(1.0, 0.45), easeoutquad);
		tween(view.fisheye,        0.0, distance(1.0, 0.45), easeoutquad, set(view.stereographic,false); set(view.pannini,false); set(display.flash10,on); );
	</action>

	<action name="view_fisheye">
		set(display.flash10,off);
		tween(view.architectural, 0.0, distance(1.0, 0.30), easeoutquad);
		tween(view.fisheye,       0.0 ,distance(1.0, 0.30), easeoutquad, set(view.stereographic,false); set(view.pannini,false); set(view.fovmax,179); tween(view.fisheye, 0.35, distance(1.0,1.25)); );
	</action>

	<action name="view_architectural">
		tween(view.fovmax,       150.0, distance(179, 1.00), easeoutquad);
		tween(view.architectural,  1.0, distance(1.0, 0.45), easeoutquad);
		tween(view.fisheye,        0.0, distance(1.0, 0.45), easeoutquad, set(view.stereographic,false);set(view.pannini,false);set(display.flash10,on); );
	</action>

	<action name="view_stereographic">
		set(display.flash10, off);
		tween(view.architectural, 0.0, 0.25);
		set(backtonormalfirst, false);
		if(view.pannini       == true,  set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, false);
		set(view.stereographic, true);
		set(view.fovmax, 150);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
	</action>

	<action name="view_pannini">
		set(display.flash10, off);
		tween(view.architectural, 0.0, 0.25);
		set(backtonormalfirst, false);
		if(view.pannini       == false, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, true);
		set(view.stereographic, true);
		set(view.fovmax, 150);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
	</action>


	<action name="view_littleplanet">
		set(display.flash10,off);
		tween(view.architectural, 0.0, 0.25);
		tween(view.vlookat,  90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst, false);
		if(view.pannini       == true,  set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		set(view.pannini, false);
		set(view.stereographic, true);
		set(view.fovmax, 150);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov,     150, distance(179, 0.75), easeoutquad);
	</action>
</krpano>
